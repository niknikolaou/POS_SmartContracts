/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface TournamentInterface extends utils.Interface {
  functions: {
    "NeedNft()": FunctionFragment;
    "TimeNow()": FunctionFragment;
    "TokenID()": FunctionFragment;
    "activeTournament()": FunctionFragment;
    "addScoreT(string)": FunctionFragment;
    "createTournament(string,uint256,uint256,bool,uint256)": FunctionFragment;
    "diamondHands()": FunctionFragment;
    "getAllScores()": FunctionFragment;
    "getAllUsernames()": FunctionFragment;
    "getAllUsers()": FunctionFragment;
    "getRemainingTime()": FunctionFragment;
    "getScore(address)": FunctionFragment;
    "getTournamentEndDate()": FunctionFragment;
    "getTournamentName()": FunctionFragment;
    "getTournamentStartDate()": FunctionFragment;
    "hasNFT(address)": FunctionFragment;
    "isActive()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setDiamondHandsContract(address)": FunctionFragment;
    "setnftContractAddress(address)": FunctionFragment;
    "tournaments(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wolf2dContractAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NeedNft"
      | "TimeNow"
      | "TokenID"
      | "activeTournament"
      | "addScoreT"
      | "createTournament"
      | "diamondHands"
      | "getAllScores"
      | "getAllUsernames"
      | "getAllUsers"
      | "getRemainingTime"
      | "getScore"
      | "getTournamentEndDate"
      | "getTournamentName"
      | "getTournamentStartDate"
      | "hasNFT"
      | "isActive"
      | "owner"
      | "renounceOwnership"
      | "setDiamondHandsContract"
      | "setnftContractAddress"
      | "tournaments"
      | "transferOwnership"
      | "wolf2dContractAddress"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NeedNft", values?: undefined): string;
  encodeFunctionData(functionFragment: "TimeNow", values?: undefined): string;
  encodeFunctionData(functionFragment: "TokenID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeTournament",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addScoreT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createTournament",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "diamondHands",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllScores",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsernames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTournamentEndDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTournamentName",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTournamentStartDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasNFT",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDiamondHandsContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setnftContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tournaments",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wolf2dContractAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "NeedNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TimeNow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TokenID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addScoreT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createTournament",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "diamondHands",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsernames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTournamentEndDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTournamentName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTournamentStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiamondHandsContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setnftContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tournaments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wolf2dContractAddress",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TournamentCreated(uint256,uint256,uint256,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TournamentCreated"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TournamentCreatedEventObject {
  tournamentId: BigNumber;
  startDate: BigNumber;
  endDate: BigNumber;
  nftpass: boolean;
  _tokenId: BigNumber;
}
export type TournamentCreatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean, BigNumber],
  TournamentCreatedEventObject
>;

export type TournamentCreatedEventFilter =
  TypedEventFilter<TournamentCreatedEvent>;

export interface Tournament extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TournamentInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NeedNft(overrides?: CallOverrides): Promise<[boolean]>;

    TimeNow(overrides?: CallOverrides): Promise<[BigNumber]>;

    TokenID(overrides?: CallOverrides): Promise<[BigNumber]>;

    activeTournament(overrides?: CallOverrides): Promise<[BigNumber]>;

    addScoreT(
      _encryptedScore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createTournament(
      _name: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      _nftpass: PromiseOrValue<boolean>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    diamondHands(overrides?: CallOverrides): Promise<[string]>;

    getAllScores(overrides?: CallOverrides): Promise<[string[]]>;

    getAllUsernames(overrides?: CallOverrides): Promise<[string[]]>;

    getAllUsers(overrides?: CallOverrides): Promise<[string[]]>;

    getRemainingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTournamentEndDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTournamentName(overrides?: CallOverrides): Promise<[string]>;

    getTournamentStartDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    hasNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDiamondHandsContract(
      _diamondHands: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setnftContractAddress(
      address2dWolf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tournaments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber] & {
        name: string;
        startDate: BigNumber;
        endDate: BigNumber;
        nftpass: boolean;
        tokenId: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wolf2dContractAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  NeedNft(overrides?: CallOverrides): Promise<boolean>;

  TimeNow(overrides?: CallOverrides): Promise<BigNumber>;

  TokenID(overrides?: CallOverrides): Promise<BigNumber>;

  activeTournament(overrides?: CallOverrides): Promise<BigNumber>;

  addScoreT(
    _encryptedScore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createTournament(
    _name: PromiseOrValue<string>,
    _startDate: PromiseOrValue<BigNumberish>,
    _endDate: PromiseOrValue<BigNumberish>,
    _nftpass: PromiseOrValue<boolean>,
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  diamondHands(overrides?: CallOverrides): Promise<string>;

  getAllScores(overrides?: CallOverrides): Promise<string[]>;

  getAllUsernames(overrides?: CallOverrides): Promise<string[]>;

  getAllUsers(overrides?: CallOverrides): Promise<string[]>;

  getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

  getScore(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTournamentEndDate(overrides?: CallOverrides): Promise<BigNumber>;

  getTournamentName(overrides?: CallOverrides): Promise<string>;

  getTournamentStartDate(overrides?: CallOverrides): Promise<BigNumber>;

  hasNFT(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDiamondHandsContract(
    _diamondHands: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setnftContractAddress(
    address2dWolf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tournaments(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, BigNumber] & {
      name: string;
      startDate: BigNumber;
      endDate: BigNumber;
      nftpass: boolean;
      tokenId: BigNumber;
    }
  >;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wolf2dContractAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    NeedNft(overrides?: CallOverrides): Promise<boolean>;

    TimeNow(overrides?: CallOverrides): Promise<BigNumber>;

    TokenID(overrides?: CallOverrides): Promise<BigNumber>;

    activeTournament(overrides?: CallOverrides): Promise<BigNumber>;

    addScoreT(
      _encryptedScore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createTournament(
      _name: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      _nftpass: PromiseOrValue<boolean>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    diamondHands(overrides?: CallOverrides): Promise<string>;

    getAllScores(overrides?: CallOverrides): Promise<string[]>;

    getAllUsernames(overrides?: CallOverrides): Promise<string[]>;

    getAllUsers(overrides?: CallOverrides): Promise<string[]>;

    getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTournamentEndDate(overrides?: CallOverrides): Promise<BigNumber>;

    getTournamentName(overrides?: CallOverrides): Promise<string>;

    getTournamentStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    hasNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setDiamondHandsContract(
      _diamondHands: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setnftContractAddress(
      address2dWolf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tournaments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, BigNumber] & {
        name: string;
        startDate: BigNumber;
        endDate: BigNumber;
        nftpass: boolean;
        tokenId: BigNumber;
      }
    >;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wolf2dContractAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TournamentCreated(uint256,uint256,uint256,bool,uint256)"(
      tournamentId?: null,
      startDate?: null,
      endDate?: null,
      nftpass?: null,
      _tokenId?: null
    ): TournamentCreatedEventFilter;
    TournamentCreated(
      tournamentId?: null,
      startDate?: null,
      endDate?: null,
      nftpass?: null,
      _tokenId?: null
    ): TournamentCreatedEventFilter;
  };

  estimateGas: {
    NeedNft(overrides?: CallOverrides): Promise<BigNumber>;

    TimeNow(overrides?: CallOverrides): Promise<BigNumber>;

    TokenID(overrides?: CallOverrides): Promise<BigNumber>;

    activeTournament(overrides?: CallOverrides): Promise<BigNumber>;

    addScoreT(
      _encryptedScore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createTournament(
      _name: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      _nftpass: PromiseOrValue<boolean>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    diamondHands(overrides?: CallOverrides): Promise<BigNumber>;

    getAllScores(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUsernames(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getRemainingTime(overrides?: CallOverrides): Promise<BigNumber>;

    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTournamentEndDate(overrides?: CallOverrides): Promise<BigNumber>;

    getTournamentName(overrides?: CallOverrides): Promise<BigNumber>;

    getTournamentStartDate(overrides?: CallOverrides): Promise<BigNumber>;

    hasNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDiamondHandsContract(
      _diamondHands: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setnftContractAddress(
      address2dWolf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tournaments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wolf2dContractAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    NeedNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TimeNow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TokenID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeTournament(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addScoreT(
      _encryptedScore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createTournament(
      _name: PromiseOrValue<string>,
      _startDate: PromiseOrValue<BigNumberish>,
      _endDate: PromiseOrValue<BigNumberish>,
      _nftpass: PromiseOrValue<boolean>,
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    diamondHands(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllScores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUsernames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRemainingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTournamentEndDate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTournamentName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTournamentStartDate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasNFT(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDiamondHandsContract(
      _diamondHands: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setnftContractAddress(
      address2dWolf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tournaments(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wolf2dContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface DiamondScoresInterface extends utils.Interface {
  functions: {
    "addNickname(string)": FunctionFragment;
    "addScore(string)": FunctionFragment;
    "getAddressByNickname(string)": FunctionFragment;
    "getAllScores()": FunctionFragment;
    "getAllUsernames()": FunctionFragment;
    "getAllUsers()": FunctionFragment;
    "getNicknameByAddress(address)": FunctionFragment;
    "getScore(address)": FunctionFragment;
    "hasNFT(uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setnftContractAddress(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "wolf2dContractAddress()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNickname"
      | "addScore"
      | "getAddressByNickname"
      | "getAllScores"
      | "getAllUsernames"
      | "getAllUsers"
      | "getNicknameByAddress"
      | "getScore"
      | "hasNFT"
      | "owner"
      | "renounceOwnership"
      | "setnftContractAddress"
      | "transferOwnership"
      | "wolf2dContractAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNickname",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressByNickname",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllScores",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsernames",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNicknameByAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasNFT",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setnftContractAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "wolf2dContractAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addNickname",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressByNickname",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsernames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNicknameByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setnftContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wolf2dContractAddress",
    data: BytesLike
  ): Result;

  events: {
    "NicknameAdded(address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ScoreAdded(address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NicknameAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScoreAdded"): EventFragment;
}

export interface NicknameAddedEventObject {
  player: string;
  nickname: string;
}
export type NicknameAddedEvent = TypedEvent<
  [string, string],
  NicknameAddedEventObject
>;

export type NicknameAddedEventFilter = TypedEventFilter<NicknameAddedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ScoreAddedEventObject {
  player: string;
  encryptedScore: string;
  nickname: string;
}
export type ScoreAddedEvent = TypedEvent<
  [string, string, string],
  ScoreAddedEventObject
>;

export type ScoreAddedEventFilter = TypedEventFilter<ScoreAddedEvent>;

export interface DiamondScores extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DiamondScoresInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNickname(
      _nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addScore(
      _encryptedScore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddressByNickname(
      nickname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllScores(overrides?: CallOverrides): Promise<[string[]]>;

    getAllUsernames(overrides?: CallOverrides): Promise<[string[]]>;

    getAllUsers(overrides?: CallOverrides): Promise<[string[]]>;

    getNicknameByAddress(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hasNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setnftContractAddress(
      address2dWolf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wolf2dContractAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  addNickname(
    _nickname: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addScore(
    _encryptedScore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddressByNickname(
    nickname: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getAllScores(overrides?: CallOverrides): Promise<string[]>;

  getAllUsernames(overrides?: CallOverrides): Promise<string[]>;

  getAllUsers(overrides?: CallOverrides): Promise<string[]>;

  getNicknameByAddress(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getScore(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hasNFT(
    _tokenId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setnftContractAddress(
    address2dWolf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wolf2dContractAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addNickname(
      _nickname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addScore(
      _encryptedScore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressByNickname(
      nickname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getAllScores(overrides?: CallOverrides): Promise<string[]>;

    getAllUsernames(overrides?: CallOverrides): Promise<string[]>;

    getAllUsers(overrides?: CallOverrides): Promise<string[]>;

    getNicknameByAddress(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hasNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setnftContractAddress(
      address2dWolf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    wolf2dContractAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NicknameAdded(address,string)"(
      player?: null,
      nickname?: null
    ): NicknameAddedEventFilter;
    NicknameAdded(player?: null, nickname?: null): NicknameAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ScoreAdded(address,string,string)"(
      player?: null,
      encryptedScore?: null,
      nickname?: null
    ): ScoreAddedEventFilter;
    ScoreAdded(
      player?: null,
      encryptedScore?: null,
      nickname?: null
    ): ScoreAddedEventFilter;
  };

  estimateGas: {
    addNickname(
      _nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addScore(
      _encryptedScore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddressByNickname(
      nickname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllScores(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUsernames(overrides?: CallOverrides): Promise<BigNumber>;

    getAllUsers(overrides?: CallOverrides): Promise<BigNumber>;

    getNicknameByAddress(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setnftContractAddress(
      address2dWolf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wolf2dContractAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addNickname(
      _nickname: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addScore(
      _encryptedScore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddressByNickname(
      nickname: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllScores(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUsernames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllUsers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNicknameByAddress(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScore(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasNFT(
      _tokenId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setnftContractAddress(
      address2dWolf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wolf2dContractAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
